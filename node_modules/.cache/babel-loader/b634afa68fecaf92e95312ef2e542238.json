{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\nvar NetworkPluginWeb = /** @class */function (_super) {\n  __extends(NetworkPluginWeb, _super);\n  function NetworkPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'Network',\n      platforms: ['web']\n    }) || this;\n    _this.listenerFunction = null;\n    return _this;\n  }\n  NetworkPluginWeb.prototype.getStatus = function () {\n    return new Promise(function (resolve, reject) {\n      if (!window.navigator) {\n        reject('Network info not available');\n        return;\n      }\n      var connected = window.navigator.onLine;\n      var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n      var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n      resolve({\n        connected: connected,\n        connectionType: connected ? connectionType : 'none'\n      });\n    });\n  };\n  NetworkPluginWeb.prototype.addListener = function (eventName, listenerFunc) {\n    var thisRef = this;\n    var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n    var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n    var onlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: true,\n      connectionType: connectionType\n    });\n    var offlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: false,\n      connectionType: 'none'\n    });\n    if (eventName.localeCompare('networkStatusChange') === 0) {\n      window.addEventListener('online', onlineBindFunc);\n      window.addEventListener('offline', offlineBindFunc);\n      return {\n        remove: function () {\n          window.removeEventListener('online', onlineBindFunc);\n          window.removeEventListener('offline', offlineBindFunc);\n        }\n      };\n    }\n  };\n  return NetworkPluginWeb;\n}(WebPlugin);\nexport { NetworkPluginWeb };\nvar Network = new NetworkPluginWeb();\nexport { Network };","map":{"version":3,"sources":["../../../src/web/network.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,QAAQ,SAAS;AASnC,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsC,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;EAIpC,SAAA,gBAAA,GAAA;IAAA,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MACJ,IAAI,EAAE,SAAS;MACf,SAAS,EAAE,CAAC,KAAK;KAClB,CAAC,IAAA,IAAA;IANJ,KAAA,CAAA,gBAAgB,GAAQ,IAAI;;EAO5B;EAEA,gBAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MACjC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;QACrB,MAAM,CAAC,4BAA4B,CAAC;QACpC;MACD;MAED,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM;MACvC,IAAI,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,aAAa,IAAI,MAAM,CAAC,SAAS,CAAC,gBAAgB;MACnH,IAAI,cAAc,GAAG,UAAU,GAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,aAAa,GAAI,MAAM;MAExF,OAAO,CAAC;QACN,SAAS,EAAE,SAAS;QACpB,cAAc,EAAE,SAAS,GAAG,cAAc,GAAG;OAC7B,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC;EAED,gBAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,SAAgC,EAAE,YAA6C,EAAA;IACzF,IAAI,OAAO,GAAG,IAAI;IAClB,IAAI,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,IAAI,MAAM,CAAC,SAAS,CAAC,aAAa,IAAI,MAAM,CAAC,SAAS,CAAC,gBAAgB;IACnH,IAAI,cAAc,GAAG,UAAU,GAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,aAAa,GAAI,MAAM;IAExF,IAAI,cAAc,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE;MAAE,SAAS,EAAE,IAAI;MAAE,cAAc,EAAE;IAAc,CAAE,CAAC;IACpG,IAAI,eAAe,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE;MAAE,SAAS,EAAE,KAAK;MAAE,cAAc,EAAE;IAAM,CAAE,CAAC;IAE9F,IAAI,SAAS,CAAC,aAAa,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;MACxD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC;MACjD,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC;MACnD,OAAO;QACL,MAAM,EAAE,YAAA;UACN,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC;UACpD,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,CAAC;QACxD;OACD;IACF;EACH,CAAC;EACH,OAAA,gBAAC;AAAD,CAAC,CAhDqC,SAAS,CAAA;;AAkD/C,IAAM,OAAO,GAAG,IAAI,gBAAgB,EAAE;AAEtC,SAAS,OAAO","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\nvar NetworkPluginWeb = /** @class */ (function (_super) {\n    __extends(NetworkPluginWeb, _super);\n    function NetworkPluginWeb() {\n        var _this = _super.call(this, {\n            name: 'Network',\n            platforms: ['web']\n        }) || this;\n        _this.listenerFunction = null;\n        return _this;\n    }\n    NetworkPluginWeb.prototype.getStatus = function () {\n        return new Promise(function (resolve, reject) {\n            if (!window.navigator) {\n                reject('Network info not available');\n                return;\n            }\n            var connected = window.navigator.onLine;\n            var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n            var connectionType = connection ? (connection.type || connection.effectiveType) : 'wifi';\n            resolve({\n                connected: connected,\n                connectionType: connected ? connectionType : 'none'\n            });\n        });\n    };\n    NetworkPluginWeb.prototype.addListener = function (eventName, listenerFunc) {\n        var thisRef = this;\n        var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n        var connectionType = connection ? (connection.type || connection.effectiveType) : 'wifi';\n        var onlineBindFunc = listenerFunc.bind(thisRef, { connected: true, connectionType: connectionType });\n        var offlineBindFunc = listenerFunc.bind(thisRef, { connected: false, connectionType: 'none' });\n        if (eventName.localeCompare('networkStatusChange') === 0) {\n            window.addEventListener('online', onlineBindFunc);\n            window.addEventListener('offline', offlineBindFunc);\n            return {\n                remove: function () {\n                    window.removeEventListener('online', onlineBindFunc);\n                    window.removeEventListener('offline', offlineBindFunc);\n                }\n            };\n        }\n    };\n    return NetworkPluginWeb;\n}(WebPlugin));\nexport { NetworkPluginWeb };\nvar Network = new NetworkPluginWeb();\nexport { Network };\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"module"}