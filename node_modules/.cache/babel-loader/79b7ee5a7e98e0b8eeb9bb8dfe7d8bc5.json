{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\nvar ClipboardPluginWeb = /** @class */function (_super) {\n  __extends(ClipboardPluginWeb, _super);\n  function ClipboardPluginWeb() {\n    return _super.call(this, {\n      name: 'Clipboard',\n      platforms: ['web']\n    }) || this;\n  }\n  ClipboardPluginWeb.prototype.write = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blob, clipboardItemInput, err_1;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n            }\n            if (!(options.string !== undefined || options.url)) return [3 /*break*/, 2];\n            if (!navigator.clipboard.writeText) {\n              return [2 /*return*/, Promise.reject('Writting to clipboard not supported in this browser')];\n            }\n            return [4 /*yield*/, navigator.clipboard.writeText(options.string !== undefined ? options.string : options.url)];\n          case 1:\n            _b.sent();\n            return [3 /*break*/, 10];\n          case 2:\n            if (!options.image) return [3 /*break*/, 9];\n            if (!navigator.clipboard.write) {\n              return [2 /*return*/, Promise.reject('Setting images not supported in this browser')];\n            }\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 7,, 8]);\n            return [4 /*yield*/, fetch(options.image)];\n          case 4:\n            return [4 /*yield*/, _b.sent().blob()];\n          case 5:\n            blob = _b.sent();\n            clipboardItemInput = new ClipboardItem((_a = {}, _a[blob.type] = blob, _a));\n            return [4 /*yield*/, navigator.clipboard.write([clipboardItemInput])];\n          case 6:\n            _b.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            err_1 = _b.sent();\n            return [2 /*return*/, Promise.reject('Failed to write image')];\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            return [2 /*return*/, Promise.reject('Nothing to write')];\n          case 10:\n            return [2 /*return*/, Promise.resolve()];\n        }\n      });\n    });\n  };\n  ClipboardPluginWeb.prototype.read = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var clipboardItems, type, clipboardBlob, data, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n            }\n            if (!!navigator.clipboard.read) return [3 /*break*/, 1];\n            if (!navigator.clipboard.readText) {\n              return [2 /*return*/, Promise.reject('Reading from clipboard not supported in this browser')];\n            }\n            return [2 /*return*/, this.readText()];\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, navigator.clipboard.read()];\n          case 2:\n            clipboardItems = _a.sent();\n            type = clipboardItems[0].types[0];\n            return [4 /*yield*/, clipboardItems[0].getType(type)];\n          case 3:\n            clipboardBlob = _a.sent();\n            return [4 /*yield*/, this._getBlobData(clipboardBlob, type)];\n          case 4:\n            data = _a.sent();\n            return [2 /*return*/, Promise.resolve({\n              value: data,\n              type: type\n            })];\n          case 5:\n            err_2 = _a.sent();\n            return [2 /*return*/, this.readText()];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.readText = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var text;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, navigator.clipboard.readText()];\n          case 1:\n            text = _a.sent();\n            return [2 /*return*/, Promise.resolve({\n              value: text,\n              type: 'text/plain'\n            })];\n        }\n      });\n    });\n  };\n  ClipboardPluginWeb.prototype._getBlobData = function (clipboardBlob, type) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = function () {\n        var r = reader.result;\n        resolve(r);\n      };\n      reader.onerror = function (e) {\n        reject(e);\n      };\n    });\n  };\n  return ClipboardPluginWeb;\n}(WebPlugin);\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };","map":{"version":3,"sources":["../../../src/web/clipboard.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\nvar ClipboardPluginWeb = /** @class */ (function (_super) {\n    __extends(ClipboardPluginWeb, _super);\n    function ClipboardPluginWeb() {\n        return _super.call(this, {\n            name: 'Clipboard',\n            platforms: ['web']\n        }) || this;\n    }\n    ClipboardPluginWeb.prototype.write = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blob, clipboardItemInput, err_1;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!(options.string !== undefined || options.url)) return [3 /*break*/, 2];\n                        if (!navigator.clipboard.writeText) {\n                            return [2 /*return*/, Promise.reject('Writting to clipboard not supported in this browser')];\n                        }\n                        return [4 /*yield*/, navigator.clipboard.writeText(options.string !== undefined ? options.string : options.url)];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 10];\n                    case 2:\n                        if (!options.image) return [3 /*break*/, 9];\n                        if (!navigator.clipboard.write) {\n                            return [2 /*return*/, Promise.reject('Setting images not supported in this browser')];\n                        }\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 7, , 8]);\n                        return [4 /*yield*/, fetch(options.image)];\n                    case 4: return [4 /*yield*/, (_b.sent()).blob()];\n                    case 5:\n                        blob = _b.sent();\n                        clipboardItemInput = new ClipboardItem((_a = {}, _a[blob.type] = blob, _a));\n                        return [4 /*yield*/, navigator.clipboard.write([clipboardItemInput])];\n                    case 6:\n                        _b.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        err_1 = _b.sent();\n                        return [2 /*return*/, Promise.reject('Failed to write image')];\n                    case 8: return [3 /*break*/, 10];\n                    case 9: return [2 /*return*/, Promise.reject('Nothing to write')];\n                    case 10: return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype.read = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var clipboardItems, type, clipboardBlob, data, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!!navigator.clipboard.read) return [3 /*break*/, 1];\n                        if (!navigator.clipboard.readText) {\n                            return [2 /*return*/, Promise.reject('Reading from clipboard not supported in this browser')];\n                        }\n                        return [2 /*return*/, this.readText()];\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, navigator.clipboard.read()];\n                    case 2:\n                        clipboardItems = _a.sent();\n                        type = clipboardItems[0].types[0];\n                        return [4 /*yield*/, clipboardItems[0].getType(type)];\n                    case 3:\n                        clipboardBlob = _a.sent();\n                        return [4 /*yield*/, this._getBlobData(clipboardBlob, type)];\n                    case 4:\n                        data = _a.sent();\n                        return [2 /*return*/, Promise.resolve({ value: data, type: type })];\n                    case 5:\n                        err_2 = _a.sent();\n                        return [2 /*return*/, this.readText()];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype.readText = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var text;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, navigator.clipboard.readText()];\n                    case 1:\n                        text = _a.sent();\n                        return [2 /*return*/, Promise.resolve({ value: text, type: 'text/plain' })];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype._getBlobData = function (clipboardBlob, type) {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            if (type.includes('image')) {\n                reader.readAsDataURL(clipboardBlob);\n            }\n            else {\n                reader.readAsText(clipboardBlob);\n            }\n            reader.onloadend = function () {\n                var r = reader.result;\n                resolve(r);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n    return ClipboardPluginWeb;\n}(WebPlugin));\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}