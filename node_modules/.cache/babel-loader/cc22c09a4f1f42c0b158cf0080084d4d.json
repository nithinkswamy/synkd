{"ast":null,"code":"var WebPluginRegistry = /** @class */function () {\n  function WebPluginRegistry() {\n    this.plugins = {};\n    this.loadedPlugins = {};\n  }\n  WebPluginRegistry.prototype.addPlugin = function (plugin) {\n    this.plugins[plugin.config.name] = plugin;\n  };\n  WebPluginRegistry.prototype.getPlugin = function (name) {\n    return this.plugins[name];\n  };\n  WebPluginRegistry.prototype.loadPlugin = function (name) {\n    var plugin = this.getPlugin(name);\n    if (!plugin) {\n      console.error(\"Unable to load web plugin \" + name + \", no such plugin found.\");\n      return;\n    }\n    plugin.load();\n  };\n  WebPluginRegistry.prototype.getPlugins = function () {\n    var p = [];\n    for (var name_1 in this.plugins) {\n      p.push(this.plugins[name_1]);\n    }\n    return p;\n  };\n  return WebPluginRegistry;\n}();\nexport { WebPluginRegistry };\nvar WebPlugins = new WebPluginRegistry();\nexport { WebPlugins };\nvar WebPlugin = /** @class */function () {\n  function WebPlugin(config, pluginRegistry) {\n    this.config = config;\n    this.loaded = false;\n    this.listeners = {};\n    this.windowListeners = {};\n    if (!pluginRegistry) {\n      WebPlugins.addPlugin(this);\n    } else {\n      pluginRegistry.addPlugin(this);\n    }\n  }\n  WebPlugin.prototype.addWindowListener = function (handle) {\n    window.addEventListener(handle.windowEventName, handle.handler);\n    handle.registered = true;\n  };\n  WebPlugin.prototype.removeWindowListener = function (handle) {\n    if (!handle) {\n      return;\n    }\n    window.removeEventListener(handle.windowEventName, handle.handler);\n    handle.registered = false;\n  };\n  WebPlugin.prototype.addListener = function (eventName, listenerFunc) {\n    var _this = this;\n    var listeners = this.listeners[eventName];\n    if (!listeners) {\n      this.listeners[eventName] = [];\n    }\n    this.listeners[eventName].push(listenerFunc);\n    // If we haven't added a window listener for this event and it requires one,\n    // go ahead and add it\n    var windowListener = this.windowListeners[eventName];\n    if (windowListener && !windowListener.registered) {\n      this.addWindowListener(windowListener);\n    }\n    return {\n      remove: function () {\n        _this.removeListener(eventName, listenerFunc);\n      }\n    };\n  };\n  WebPlugin.prototype.removeListener = function (eventName, listenerFunc) {\n    var listeners = this.listeners[eventName];\n    if (!listeners) {\n      return;\n    }\n    var index = listeners.indexOf(listenerFunc);\n    this.listeners[eventName].splice(index, 1);\n    // If there are no more listeners for this type of event,\n    // remove the window listener\n    if (!this.listeners[eventName].length) {\n      this.removeWindowListener(this.windowListeners[eventName]);\n    }\n  };\n  WebPlugin.prototype.removeAllListeners = function () {\n    this.listeners = {};\n    for (var listener in this.windowListeners) {\n      this.removeWindowListener(this.windowListeners[listener]);\n    }\n    this.windowListeners = {};\n  };\n  WebPlugin.prototype.notifyListeners = function (eventName, data) {\n    var listeners = this.listeners[eventName];\n    if (listeners) {\n      listeners.forEach(function (listener) {\n        return listener(data);\n      });\n    }\n  };\n  WebPlugin.prototype.hasListeners = function (eventName) {\n    return !!this.listeners[eventName].length;\n  };\n  WebPlugin.prototype.registerWindowListener = function (windowEventName, pluginEventName) {\n    var _this = this;\n    this.windowListeners[pluginEventName] = {\n      registered: false,\n      windowEventName: windowEventName,\n      pluginEventName: pluginEventName,\n      handler: function (event) {\n        _this.notifyListeners(pluginEventName, event);\n      }\n    };\n  };\n  WebPlugin.prototype.requestPermissions = function () {\n    if (Capacitor.isNative) {\n      return Capacitor.nativePromise(this.config.name, 'requestPermissions', {});\n    } else {\n      return Promise.resolve({\n        results: []\n      });\n    }\n  };\n  WebPlugin.prototype.load = function () {\n    this.loaded = true;\n  };\n  return WebPlugin;\n}();\nexport { WebPlugin };\nvar shouldMergeWebPlugin = function (plugin) {\n  return plugin.config.platforms && plugin.config.platforms.indexOf(Capacitor.platform) >= 0;\n};\n/**\n * For all our known web plugins, merge them into the global plugins\n * registry if they aren't already existing. If they don't exist, that\n * means there's no existing native implementation for it.\n * @param knownPlugins the Capacitor.Plugins global registry.\n */\nexport var mergeWebPlugins = function (knownPlugins) {\n  var plugins = WebPlugins.getPlugins();\n  for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n    var plugin = plugins_1[_i];\n    mergeWebPlugin(knownPlugins, plugin);\n  }\n};\nexport var mergeWebPlugin = function (knownPlugins, plugin) {\n  // If we already have a plugin registered (meaning it was defined in the native layer),\n  // then we should only overwrite it if the corresponding web plugin activates on\n  // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n  if (knownPlugins.hasOwnProperty(plugin.config.name) && !shouldMergeWebPlugin(plugin)) {\n    return;\n  }\n  knownPlugins[plugin.config.name] = plugin;\n};","map":{"version":3,"sources":["../../../src/web/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var WebPluginRegistry = /** @class */ (function () {\n    function WebPluginRegistry() {\n        this.plugins = {};\n        this.loadedPlugins = {};\n    }\n    WebPluginRegistry.prototype.addPlugin = function (plugin) {\n        this.plugins[plugin.config.name] = plugin;\n    };\n    WebPluginRegistry.prototype.getPlugin = function (name) {\n        return this.plugins[name];\n    };\n    WebPluginRegistry.prototype.loadPlugin = function (name) {\n        var plugin = this.getPlugin(name);\n        if (!plugin) {\n            console.error(\"Unable to load web plugin \" + name + \", no such plugin found.\");\n            return;\n        }\n        plugin.load();\n    };\n    WebPluginRegistry.prototype.getPlugins = function () {\n        var p = [];\n        for (var name_1 in this.plugins) {\n            p.push(this.plugins[name_1]);\n        }\n        return p;\n    };\n    return WebPluginRegistry;\n}());\nexport { WebPluginRegistry };\nvar WebPlugins = new WebPluginRegistry();\nexport { WebPlugins };\nvar WebPlugin = /** @class */ (function () {\n    function WebPlugin(config, pluginRegistry) {\n        this.config = config;\n        this.loaded = false;\n        this.listeners = {};\n        this.windowListeners = {};\n        if (!pluginRegistry) {\n            WebPlugins.addPlugin(this);\n        }\n        else {\n            pluginRegistry.addPlugin(this);\n        }\n    }\n    WebPlugin.prototype.addWindowListener = function (handle) {\n        window.addEventListener(handle.windowEventName, handle.handler);\n        handle.registered = true;\n    };\n    WebPlugin.prototype.removeWindowListener = function (handle) {\n        if (!handle) {\n            return;\n        }\n        window.removeEventListener(handle.windowEventName, handle.handler);\n        handle.registered = false;\n    };\n    WebPlugin.prototype.addListener = function (eventName, listenerFunc) {\n        var _this = this;\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            this.listeners[eventName] = [];\n        }\n        this.listeners[eventName].push(listenerFunc);\n        // If we haven't added a window listener for this event and it requires one,\n        // go ahead and add it\n        var windowListener = this.windowListeners[eventName];\n        if (windowListener && !windowListener.registered) {\n            this.addWindowListener(windowListener);\n        }\n        return {\n            remove: function () {\n                _this.removeListener(eventName, listenerFunc);\n            }\n        };\n    };\n    WebPlugin.prototype.removeListener = function (eventName, listenerFunc) {\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        var index = listeners.indexOf(listenerFunc);\n        this.listeners[eventName].splice(index, 1);\n        // If there are no more listeners for this type of event,\n        // remove the window listener\n        if (!this.listeners[eventName].length) {\n            this.removeWindowListener(this.windowListeners[eventName]);\n        }\n    };\n    WebPlugin.prototype.removeAllListeners = function () {\n        this.listeners = {};\n        for (var listener in this.windowListeners) {\n            this.removeWindowListener(this.windowListeners[listener]);\n        }\n        this.windowListeners = {};\n    };\n    WebPlugin.prototype.notifyListeners = function (eventName, data) {\n        var listeners = this.listeners[eventName];\n        if (listeners) {\n            listeners.forEach(function (listener) { return listener(data); });\n        }\n    };\n    WebPlugin.prototype.hasListeners = function (eventName) {\n        return !!this.listeners[eventName].length;\n    };\n    WebPlugin.prototype.registerWindowListener = function (windowEventName, pluginEventName) {\n        var _this = this;\n        this.windowListeners[pluginEventName] = {\n            registered: false,\n            windowEventName: windowEventName,\n            pluginEventName: pluginEventName,\n            handler: function (event) {\n                _this.notifyListeners(pluginEventName, event);\n            }\n        };\n    };\n    WebPlugin.prototype.requestPermissions = function () {\n        if (Capacitor.isNative) {\n            return Capacitor.nativePromise(this.config.name, 'requestPermissions', {});\n        }\n        else {\n            return Promise.resolve({ results: [] });\n        }\n    };\n    WebPlugin.prototype.load = function () {\n        this.loaded = true;\n    };\n    return WebPlugin;\n}());\nexport { WebPlugin };\nvar shouldMergeWebPlugin = function (plugin) {\n    return plugin.config.platforms && plugin.config.platforms.indexOf(Capacitor.platform) >= 0;\n};\n/**\n * For all our known web plugins, merge them into the global plugins\n * registry if they aren't already existing. If they don't exist, that\n * means there's no existing native implementation for it.\n * @param knownPlugins the Capacitor.Plugins global registry.\n */\nexport var mergeWebPlugins = function (knownPlugins) {\n    var plugins = WebPlugins.getPlugins();\n    for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n        var plugin = plugins_1[_i];\n        mergeWebPlugin(knownPlugins, plugin);\n    }\n};\nexport var mergeWebPlugin = function (knownPlugins, plugin) {\n    // If we already have a plugin registered (meaning it was defined in the native layer),\n    // then we should only overwrite it if the corresponding web plugin activates on\n    // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n    if (knownPlugins.hasOwnProperty(plugin.config.name) && !shouldMergeWebPlugin(plugin)) {\n        return;\n    }\n    knownPlugins[plugin.config.name] = plugin;\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}