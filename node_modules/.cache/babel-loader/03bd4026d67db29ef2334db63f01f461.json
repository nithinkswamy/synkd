{"ast":null,"code":"var CapacitorWeb = /** @class */function () {\n  function CapacitorWeb() {\n    var _this = this;\n    this.platform = 'web';\n    this.isNative = false;\n    // Need to assign here to avoid having to define every plugin but still\n    // get the typed benefits of the provided plugins in PluginRegistry\n    this.Plugins = {};\n    // Gracefully degrade in non-Proxy supporting engines, e.g. IE11. This\n    // effectively means that trying to access an unavailable plugin will\n    // locally throw, but this is still better than throwing a syntax error.\n    if (typeof Proxy !== 'undefined') {\n      // Build a proxy for the Plugins object that returns the \"Noop Plugin\"\n      // if a plugin isn't available\n      this.Plugins = new Proxy(this.Plugins, {\n        get: function (target, prop) {\n          if (typeof target[prop] === 'undefined') {\n            var thisRef_1 = _this;\n            return new Proxy({}, {\n              get: function (_target, _prop) {\n                if (typeof _target[_prop] === 'undefined') {\n                  return thisRef_1.pluginMethodNoop.bind(thisRef_1, _target, _prop, prop);\n                } else {\n                  return _target[_prop];\n                }\n              }\n            });\n          } else {\n            return target[prop];\n          }\n        }\n      });\n    }\n  }\n  CapacitorWeb.prototype.pluginMethodNoop = function (_target, _prop, pluginName) {\n    return Promise.reject(pluginName + \" does not have web implementation.\");\n  };\n  CapacitorWeb.prototype.getPlatform = function () {\n    return this.platform;\n  };\n  CapacitorWeb.prototype.isPluginAvailable = function (name) {\n    return this.Plugins.hasOwnProperty(name);\n  };\n  CapacitorWeb.prototype.convertFileSrc = function (filePath) {\n    return filePath;\n  };\n  CapacitorWeb.prototype.handleError = function (e) {\n    console.error(e);\n  };\n  return CapacitorWeb;\n}();\nexport { CapacitorWeb };","map":{"version":3,"sources":["../../src/web-runtime.ts"],"names":[],"mappings":"AAEA,IAAA,YAAA,GAAA,aAAA,YAAA;EAKE,SAAA,YAAA,GAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IAHA,IAAA,CAAA,QAAQ,GAAG,KAAK;IAChB,IAAA,CAAA,QAAQ,GAAG,KAAK;IAGd;IACA;IACA,IAAI,CAAC,OAAO,GAAG,CAAA,CAAS;IAExB;IACA;IACA;IACA,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;MAChC;MACA;MACA,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAM,IAAI,CAAC,OAAO,EAAE;QAC1C,GAAG,EAAE,UAAC,MAAM,EAAE,IAAI,EAAA;UAChB,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;YACvC,IAAI,SAAO,GAAG,KAAI;YAClB,OAAO,IAAI,KAAK,CAAM,CAAA,CAAE,EAAE;cACxB,GAAG,EAAE,UAAC,OAAO,EAAE,KAAK,EAAA;gBAClB,IAAI,OAAO,OAAO,CAAC,KAAK,CAAC,KAAK,WAAW,EAAE;kBACzC,OAAO,SAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAO,EAAE,OAAO,EAAE,KAAK,EAAG,IAAI,CAAC;iBACrE,MAAM;kBACL,OAAO,OAAO,CAAC,KAAK,CAAC;gBACtB;cACH;aACD,CAAC;WACH,MAAM;YACL,OAAO,MAAM,CAAC,IAAI,CAAC;UACpB;QACH;OACD,CAAC;IACH;EACH;EAEA,YAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,OAAY,EAAE,KAAkB,EAAE,UAAkB,EAAA;IACnE,OAAO,OAAO,CAAC,MAAM,CAAI,UAAU,GAAA,oCAAoC,CAAC;EAC1E,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,IAAI,CAAC,QAAQ;EACtB,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,IAAY,EAAA;IAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC;EAC1C,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,QAAgB,EAAA;IAC7B,OAAO,QAAQ;EACjB,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,CAAQ,EAAA;IAClB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EAClB,CAAC;EACH,OAAA,YAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["var CapacitorWeb = /** @class */ (function () {\n    function CapacitorWeb() {\n        var _this = this;\n        this.platform = 'web';\n        this.isNative = false;\n        // Need to assign here to avoid having to define every plugin but still\n        // get the typed benefits of the provided plugins in PluginRegistry\n        this.Plugins = {};\n        // Gracefully degrade in non-Proxy supporting engines, e.g. IE11. This\n        // effectively means that trying to access an unavailable plugin will\n        // locally throw, but this is still better than throwing a syntax error.\n        if (typeof Proxy !== 'undefined') {\n            // Build a proxy for the Plugins object that returns the \"Noop Plugin\"\n            // if a plugin isn't available\n            this.Plugins = new Proxy(this.Plugins, {\n                get: function (target, prop) {\n                    if (typeof target[prop] === 'undefined') {\n                        var thisRef_1 = _this;\n                        return new Proxy({}, {\n                            get: function (_target, _prop) {\n                                if (typeof _target[_prop] === 'undefined') {\n                                    return thisRef_1.pluginMethodNoop.bind(thisRef_1, _target, _prop, prop);\n                                }\n                                else {\n                                    return _target[_prop];\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        return target[prop];\n                    }\n                }\n            });\n        }\n    }\n    CapacitorWeb.prototype.pluginMethodNoop = function (_target, _prop, pluginName) {\n        return Promise.reject(pluginName + \" does not have web implementation.\");\n    };\n    CapacitorWeb.prototype.getPlatform = function () {\n        return this.platform;\n    };\n    CapacitorWeb.prototype.isPluginAvailable = function (name) {\n        return this.Plugins.hasOwnProperty(name);\n    };\n    CapacitorWeb.prototype.convertFileSrc = function (filePath) {\n        return filePath;\n    };\n    CapacitorWeb.prototype.handleError = function (e) {\n        console.error(e);\n    };\n    return CapacitorWeb;\n}());\nexport { CapacitorWeb };\n//# sourceMappingURL=web-runtime.js.map"]},"metadata":{},"sourceType":"module"}