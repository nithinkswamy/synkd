{"ast":null,"code":"import { __rest } from 'tslib';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport React from 'react';\nimport { matchPath as matchPath$1, withRouter, Router } from 'react-router-dom';\nimport { ViewStacks, generateId, IonRoute, ViewLifeCycleManager, StackContext, RouteManagerContext, getConfig, LocationHistory, NavManager } from '@ionic/react';\nimport { Route, matchPath, Router as Router$1 } from 'react-router';\nclass IonRouteInner extends React.PureComponent {\n  render() {\n    return React.createElement(Route, {\n      path: this.props.path,\n      exact: this.props.exact,\n      render: this.props.render,\n      computedMatch: this.props.computedMatch\n    });\n  }\n}\nclass ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n  createViewItem(outletId, reactElement, routeInfo, page) {\n    const viewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false\n    };\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props\n    };\n    return viewItem;\n  }\n  getChildrenToRender(outletId, ionRouterOutlet, routeInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const viewItem = viewItems.find(v => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n    const children = viewItems.map(viewItem => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n      return clonedChild;\n    });\n    return children;\n  }\n  findViewItemByRouteInfo(routeInfo, outletId) {\n    const {\n      viewItem,\n      match\n    } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    if (viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n  findLeavingViewItemByRouteInfo(routeInfo, outletId) {\n    let mustBeIonRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const {\n      viewItem\n    } = this.findViewItemByPath(routeInfo.lastPathname, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n  findViewItemByPathname(pathname, outletId) {\n    const {\n      viewItem\n    } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n  findViewItemByPath(pathname, outletId, forceExact, mustBeIonRoute) {\n    let viewItem;\n    let match;\n    let viewStack;\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n    return {\n      viewItem,\n      match\n    };\n    function matchView(v) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n    function matchDefaultRoute(v) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {}\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\nfunction matchComponent(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath(pathname, matchProps);\n  return match;\n}\nfunction clonePageElement(leavingViewHtml) {\n  let html;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild;\n  }\n  return undefined;\n}\nclass StackManager extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.stackContextValue = {\n      registerIonPage: this.registerIonPage.bind(this),\n      isInOutlet: () => true\n    };\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n  }\n  componentDidMount() {\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      // console.log(`SM Mount - ${this.routerOutletElement.id} (${this.id})`);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.routeInfo.pathname !== prevProps.routeInfo.pathname) {\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentWillUnmount() {\n    // console.log(`SM UNMount - ${(this.routerOutletElement?.id as any).id} (${this.id})`);\n    this.context.clearOutlet(this.id);\n  }\n  async handlePageTransition(routeInfo) {\n    var _a, _b;\n    // If routerOutlet isn't quite ready, give it another try in a moment\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      setTimeout(() => this.handlePageTransition(routeInfo), 10);\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      }\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if ((_a = routeInfo.routeOptions) === null || _a === void 0 ? void 0 : _a.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n      const enteringRoute = matchRoute((_b = this.ionRouterOutlet) === null || _b === void 0 ? void 0 : _b.props.children, routeInfo);\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      }\n      if (!enteringViewItem) {\n        if (enteringRoute) {\n          enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n          this.context.addViewItem(enteringViewItem);\n        }\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n  registerIonPage(page, routeInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n    }\n    this.handlePageTransition(routeInfo);\n  }\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        return this.context.canGoBack();\n      } else {\n        return false;\n      }\n    };\n    const onStart = () => {\n      this.context.goBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n  async transitionPage(routeInfo, enteringViewItem, leavingViewItem) {\n    const routerOutlet = this.routerOutletElement;\n    const direction = routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const match = matchComponent$1(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem === null || leavingViewItem === void 0 ? void 0 : leavingViewItem.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n    async function runCommit(enteringEl, leavingEl) {\n      enteringEl.classList.add('ion-page');\n      enteringEl.classList.add('ion-page-invisible');\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: direction === undefined ? 0 : undefined,\n        direction: direction,\n        showGoBack: direction === 'forward',\n        progressAnimation: false,\n        animationBuilder: routeInfo.routeAnimation\n      });\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    const ionRouterOutlet = React.Children.only(children);\n    this.ionRouterOutlet = ionRouterOutlet;\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n    return React.createElement(StackContext.Provider, {\n      value: this.stackContextValue\n    }, React.cloneElement(ionRouterOutlet, {\n      ref: node => {\n        if (ionRouterOutlet.props.setRef) {\n          ionRouterOutlet.props.setRef(node);\n        }\n        if (ionRouterOutlet.props.forwardedRef) {\n          ionRouterOutlet.props.forwardedRef.current = node;\n        }\n        this.routerOutletElement = node;\n        const {\n          ref\n        } = ionRouterOutlet;\n        if (typeof ref === 'function') {\n          ref(node);\n        }\n      }\n    }, components));\n  }\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\nfunction matchRoute(node, routeInfo) {\n  let matchedNode;\n  React.Children.forEach(node, child => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component\n    };\n    const match = matchPath$1(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node, child => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n  return matchedNode;\n}\nfunction matchComponent$1(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath$1(pathname, matchProps);\n  return match;\n}\nclass IonRouterInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.exitViewFromOtherOutletHandlers = [];\n    this.locationHistory = new LocationHistory();\n    this.viewStack = new ReactRouterViewStack();\n    this.routeMangerContextState = {\n      canGoBack: () => this.locationHistory.canGoBack(),\n      clearOutlet: this.viewStack.clear,\n      findViewItemByPathname: this.viewStack.findViewItemByPathname,\n      getChildrenToRender: this.viewStack.getChildrenToRender,\n      goBack: () => this.handleNavigateBack(),\n      createViewItem: this.viewStack.createViewItem,\n      findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n      findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n      addViewItem: this.viewStack.add,\n      unMountViewItem: this.viewStack.remove\n    };\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search\n    };\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n    this.state = {\n      routeInfo\n    };\n  }\n  handleChangeTab(tab, path, routeOptions) {\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = Object.assign(Object.assign({}, routeInfo), {\n        routeAction: 'push',\n        routeDirection: 'none'\n      });\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n  handleHistoryChange(location, action) {\n    var _a, _b, _c;\n    let leavingLocationInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab\n          };\n        }\n        if (action === 'POP') {\n          const ri = this.locationHistory.current();\n          if (ri && ri.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(ri);\n            this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n              routeAction: 'pop',\n              routeDirection: 'back'\n            });\n          } else {\n            const direction = 'none';\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: direction,\n              tab: this.currentTab\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: ((_a = location.state) === null || _a === void 0 ? void 0 : _a.direction) || 'forward',\n            routeOptions: (_b = location.state) === null || _b === void 0 ? void 0 : _b.routerOptions,\n            tab: this.currentTab\n          };\n        }\n      }\n      let routeInfo;\n      if ((_c = this.incomingRouteParams) === null || _c === void 0 ? void 0 : _c.id) {\n        routeInfo = Object.assign(Object.assign({}, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname\n        });\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed = this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = Object.assign(Object.assign({\n          id: generateId('routeInfo')\n        }, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname\n        });\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r === null || r === void 0 ? void 0 : r.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute === null || lastRoute === void 0 ? void 0 : lastRoute.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          routeInfo.lastPathname = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pathname) || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.lastPathname;\n          routeInfo.pushedByRoute = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pushedByRoute) || routeInfo.pushedByRoute;\n          routeInfo.routeDirection = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeDirection) || routeInfo.routeDirection;\n          routeInfo.routeAnimation = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeAnimation) || routeInfo.routeAnimation;\n        }\n        this.locationHistory.add(routeInfo);\n      }\n      this.setState({\n        routeInfo\n      });\n    }\n    this.incomingRouteParams = undefined;\n  }\n  handleNativeBack() {\n    this.props.history.goBack();\n  }\n  handleNavigate(path, routeAction, routeDirection, routeAnimation, routeOptions, tab) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab\n    });\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n  handleNavigateBack() {\n    let defaultHref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    let routeAnimation = arguments.length > 1 ? arguments[1] : undefined;\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref');\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation\n        });\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute) {\n          this.props.history.goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref, 'pop', 'back');\n    }\n  }\n  handleResetTab(tab, originalHref, originalRouteOptions) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = Object.assign({}, routeInfo);\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = Object.assign(Object.assign({}, newRouteInfo), {\n        routeAction: 'pop',\n        routeDirection: 'back'\n      });\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n  handleSetCurrentTab(tab) {\n    this.currentTab = tab;\n    const ri = Object.assign({}, this.locationHistory.current());\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.routeMangerContextState\n    }, React.createElement(NavManager, {\n      ionRoute: IonRouteInner,\n      ionRedirect: {},\n      stackManager: StackManager,\n      routeInfo: this.state.routeInfo,\n      onNativeBack: this.handleNativeBack,\n      onNavigateBack: this.handleNavigateBack,\n      onNavigate: this.handleNavigate,\n      onSetCurrentTab: this.handleSetCurrentTab,\n      onChangeTab: this.handleChangeTab,\n      onResetTab: this.handleResetTab,\n      locationHistory: this.locationHistory\n    }, this.props.children));\n  }\n}\nconst IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\nclass IonReactRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createBrowserHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  handleHistoryChange(location, action) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactMemoryRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  handleHistoryChange(location, action) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router$1, Object.assign({}, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactHashRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createHashHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  handleHistoryChange(location, action) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"sources":["../src/ReactRouter/IonRouteInner.tsx","../src/ReactRouter/ReactRouterViewStack.tsx","../src/ReactRouter/clonePageElement.ts","../src/ReactRouter/StackManager.tsx","../src/ReactRouter/IonRouter.tsx","../src/ReactRouter/IonReactRouter.tsx","../src/ReactRouter/IonReactMemoryRouter.tsx","../src/ReactRouter/IonReactHashRouter.tsx"],"names":["matchComponent","matchPath","createHistory","Router"],"mappings":";;;;;;MAIa,aAAc,SAAQ,KAAK,CAAC,aAA4B,CAAA;EACnE,MAAM,GAAA;IACJ,OACE,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA;MACJ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;MACrB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;MACvB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;MACzB,aAAa,EAAG,IAAI,CAAC,KAAa,CAAC;IAAa,CAAA,CAChD;EAEL;;MCHU,oBAAqB,SAAQ,UAAU,CAAA;EAClD,WAAA,GAAA;IACE,KAAK,EAAE;IACP,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;IACtE,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC;IACpF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC;EACrE;EAED,cAAc,CACZ,QAAgB,EAChB,YAAgC,EAChC,SAAoB,EACpB,IAAkB,EAAA;IAElB,MAAM,QAAQ,GAAa;MACzB,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC;MAC1B,QAAQ;MACR,cAAc,EAAE,IAAI;MACpB,YAAY;MACZ,KAAK,EAAE,IAAI;MACX,QAAQ,EAAE;KACX;IAED,MAAM,UAAU,GAAG;MACjB,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK;MAC/B,IAAI,EAAE,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI;MACxD,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC;KAC/B;IAED,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;IAEvD,IAAI,YAAY,CAAC,IAAI,KAAK,QAAQ,EAAE;MAClC,QAAQ,CAAC,QAAQ,GAAG,IAAI;MACxB,QAAQ,CAAC,wBAAwB,GAAG,YAAY,CAAC,KAAK,CAAC,wBAAwB;IAChF;IAED,QAAQ,CAAC,SAAS,GAAG;MACnB,KAAK;MACL,UAAU,EAAE,YAAY,CAAC;KAC1B;IAED,OAAO,QAAQ;EAChB;EAED,mBAAmB,CAAC,QAAgB,EAAE,eAAmC,EAAE,SAAoB,EAAA;IAC7F,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;;IAGtD,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAG,KAAyB,IAAA;MAC/E,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAE,CAAC,IAAA;QAChC,OAAO,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC;OACzF,CAAC;MACF,IAAI,QAAQ,EAAE;QACZ,QAAQ,CAAC,YAAY,GAAG,KAAK;MAC9B;KACF,CAAC;IAEF,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAE,QAAQ,IAAA;MACtC,IAAI,WAAW;MACf,IAAI,QAAQ,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,wBAAwB,EAAE;QAC3D,WAAW,GACT,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA;UACnB,GAAG,EAAE,QAAQ,QAAQ,CAAC,EAAE,EAAE;UAC1B,KAAK,EAAE,QAAQ,CAAC,KAAK;UACrB,UAAU,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;QAAC,CAAA,EAEtC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,YAAY,EAAE;UACzC,aAAa,EAAE,QAAQ,CAAC,SAAS,CAAC;SACnC,CAAC,CAEL;OACF,MAAM;QACL,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,YAAY,EAAE,SAAS,CAAC,QAAQ,CAAC;QACvE,WAAW,GACT,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA;UACnB,GAAG,EAAE,QAAQ,QAAQ,CAAC,EAAE,EAAE;UAC1B,KAAK,EAAE,QAAQ,CAAC,KAAK;UACrB,UAAU,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;QAAC,CAAA,EAEtC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,YAAY,EAAE;UACzC,aAAa,EAAE,QAAQ,CAAC,SAAS,CAAC;SACnC,CAAC,CAEL;QAED,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE;UACtC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS;UACpC,QAAQ,CAAC,KAAK,GAAG,KAAK;QACvB;MACF;MAED,OAAO,WAAW;KACnB,CAAC;IACF,OAAO,QAAQ;EAChB;EAED,uBAAuB,CAAC,SAAoB,EAAE,QAAiB,EAAA;IAC7D,MAAM;MAAE,QAAQ;MAAE;IAAK,CAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC;IACjF,IAAI,QAAQ,IAAI,KAAK,EAAE;MACrB,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK;IACjC;IACD,OAAO,QAAQ;EAChB;EAED,8BAA8B,CAAC,SAAoB,EAAE,QAAiB,EAAuB;IAAA,IAArB,cAAc,uEAAG,IAAI;IAC3F,MAAM;MAAE;IAAQ,CAAE,GAAG,IAAI,CAAC,kBAAkB,CAC1C,SAAS,CAAC,YAAa,EACvB,QAAQ,EACR,KAAK,EACL,cAAc,CACf;IACD,OAAO,QAAQ;EAChB;EAED,sBAAsB,CAAC,QAAgB,EAAE,QAAiB,EAAA;IACxD,MAAM;MAAE;IAAQ,CAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;IAChE,OAAO,QAAQ;EAChB;EAEO,kBAAkB,CACxB,QAAgB,EAChB,QAAiB,EACjB,UAAoB,EACpB,cAAwB,EAAA;IAExB,IAAI,QAA8B;IAClC,IAAI,KAA+C;IACnD,IAAI,SAAqB;IAEzB,IAAI,QAAQ,EAAE;MACZ,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;MAChD,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;MACzB,IAAI,CAAC,QAAQ,EAAE;QACb,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC;MAClC;KACF,MAAM;MACL,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE;MACxC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;MACzB,IAAI,CAAC,QAAQ,EAAE;QACb,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC;MAClC;IACF;IAED,OAAO;MAAE,QAAQ;MAAE;IAAK,CAAE;IAE1B,SAAS,SAAS,CAAC,CAAW,EAAA;MAC5B,IAAI,cAAc,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE;QACjC,OAAO,KAAK;MACb;MACD,MAAM,UAAU,GAAG;QACjB,KAAK,EAAE,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK;QACvD,IAAI,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI;QAChE,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC;OACnC;MACD,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;MAC/C,IAAI,OAAO,EAAE;QACX,QAAQ,GAAG,CAAC;QACZ,KAAK,GAAG,OAAO;QACf,OAAO,IAAI;MACZ;MACD,OAAO,KAAK;IACb;IAED,SAAS,iBAAiB,CAAC,CAAW,EAAA;;MAEpC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE;QAChE,KAAK,GAAG;UACN,IAAI,EAAE,QAAQ;UACd,GAAG,EAAE,QAAQ;UACb,OAAO,EAAE,IAAI;UACb,MAAM,EAAE,CAAA;SACT;QACD,QAAQ,GAAG,CAAC;QACZ,OAAO,IAAI;MACZ;MACD,OAAO,KAAK;IACb;EACF;AACF;AAED,SAAS,cAAc,CAAC,IAAwB,EAAE,QAAgB,EAAE,UAAoB,EAAA;EACtF,MAAM,UAAU,GAAG;IACjB,KAAK,EAAE,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK;IAC3C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;IACxC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;GACvB;EACD,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;EAE7C,OAAO,KAAK;AACd;SC1MgB,gBAAgB,CAAC,eAAqC,EAAA;EACpE,IAAI,IAAY;EAChB,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;IACvC,IAAI,GAAG,eAAe;GACvB,MAAM;IACL,IAAI,GAAG,eAAe,CAAC,SAAS;EACjC;EACD,IAAI,QAAQ,EAAE;IACZ,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;IAC3C,KAAK,CAAC,SAAS,GAAG,IAAI;IACtB,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE;;IAEvB,MAAM,aAAa,GAAG,KAAK,CAAC,oBAAoB,CAAC,iBAAiB,CAAC;IACnE,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;MACpB,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;IAC1B;IACD,OAAO,KAAK,CAAC,UAAyB;EACvC;EACD,OAAO,SAAS;AAClB;MCCa,YAAa,SAAQ,KAAK,CAAC,aAAmD,CAAA;EAWzF,WAAA,CAAY,KAAwB,EAAA;IAClC,KAAK,CAAC,KAAK,CAAC;IANd,IAAA,CAAA,iBAAiB,GAAsB;MACrC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;MAChD,UAAU,EAAE,MAAM;KACnB;IAIC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;IAChE,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,cAAc,CAAC;EACrC;EAED,iBAAiB,GAAA;IACf,IAAI,IAAI,CAAC,mBAAmB,EAAE;MAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC;;MAEhD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAChD;EACF;EAED,kBAAkB,CAAC,SAA4B,EAAA;IAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE;MAClE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAChD;EACF;EAED,oBAAoB,GAAA;;IAElB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;EAClC;EAED,MAAM,oBAAoB,CAAC,SAAoB,EAAA;;;IAE7C,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;MACjE,UAAU,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;KAC3D,MAAM;MACL,IAAI,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC;MAC/E,IAAI,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC;MAErF,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,qBAAqB,EAAE;QACvD,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,CACnD,SAAS,CAAC,qBAAqB,EAC/B,IAAI,CAAC,EAAE,CACR;MACF;;MAGD,IAAI,eAAe,EAAE;QACnB,IAAI,SAAS,CAAC,WAAW,KAAK,SAAS,EAAE;UACvC,eAAe,CAAC,KAAK,GAAG,KAAK;SAC9B,MAAM,IAAI,EAAE,SAAS,CAAC,WAAW,KAAK,MAAM,IAAI,SAAS,CAAC,cAAc,KAAK,SAAS,CAAC,EAAE;UACxF,IAAI,SAAS,CAAC,cAAc,KAAK,MAAM,IAAI,gBAAgB,KAAK,eAAe,EAAE;YAC/E,eAAe,CAAC,KAAK,GAAG,KAAK;UAC9B;SACF,MAAM,IAAA,CAAA,EAAA,GAAI,SAAS,CAAC,YAAY,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE;UAC1C,eAAe,CAAC,KAAK,GAAG,KAAK;QAC9B;MACF;MAED,MAAM,aAAa,GAAG,UAAU,CAAA,CAAA,EAAA,GAC9B,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,CAAC,QAAQ,EACpC,SAAS,CACY;MACvB,IAAI,gBAAgB,EAAE;QACpB,gBAAgB,CAAC,YAAY,GAAG,aAAa;MAC9C;MACD,IAAI,CAAC,gBAAgB,EAAE;QACrB,IAAI,aAAa,EAAE;UACjB,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa,EAAE,SAAS,CAAC;UACjF,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC;QAC3C;MACF;MACD,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,cAAc,EAAE;QACvD,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,gBAAgB,EAAE,eAAe,CAAC;OAClE,MAAM,IAAI,eAAe,IAAI,CAAC,aAAa,IAAI,CAAC,gBAAgB,EAAE;;;;;QAKjE,IAAI,eAAe,CAAC,cAAc,EAAE;UAClC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC;UAC/D,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;QACnE;;MAEF;;MAED,IAAI,CAAC,WAAW,EAAE;IACnB;EACF;EAED,eAAe,CAAC,IAAiB,EAAE,SAAoB,EAAA;IACrD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC;IAC1E,IAAI,SAAS,EAAE;MACb,SAAS,CAAC,cAAc,GAAG,IAAI;MAC/B,SAAS,CAAC,QAAQ,GAAG,IAAI;IAC1B;IACD,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC;EACrC;EAED,MAAM,iBAAiB,CAAC,YAAwC,EAAA;IAC9D,MAAM,QAAQ,GAAG,MAAA;MACf,MAAM,MAAM,GAAG,SAAS,EAAE;MAC1B,MAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,YAAY,CAAC,IAAI,KAAK,KAAK,CAAC;MAC1F,IAAI,YAAY,EAAE;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;OAChC,MAAM;QACL,OAAO,KAAK;MACb;KACF;IAED,MAAM,OAAO,GAAG,MAAA;MACd,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;KACtB;IACD,YAAY,CAAC,YAAY,GAAG;MAC1B,QAAQ;MACR,OAAO;MACP,KAAK,EAAG,eAAe,IAAK;KAC7B;EACF;EAED,MAAM,cAAc,CAClB,SAAoB,EACpB,gBAA0B,EAC1B,eAA0B,EAAA;IAE1B,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAoB;IAE9C,MAAM,SAAS,GACb,SAAS,CAAC,cAAc,KAAK,MAAM,IAAI,SAAS,CAAC,cAAc,KAAK,MAAM,GACtE,SAAS,GACT,SAAS,CAAC,cAAc;IAE9B,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,cAAc,IAAI,IAAI,CAAC,mBAAmB,EAAE;MACnF,IACE,eAAe,IACf,eAAe,CAAC,cAAc,IAC9B,gBAAgB,KAAK,eAAe,EACpC;;;QAIA,MAAM,KAAK,GAAGA,gBAAc,CAAC,eAAe,CAAC,YAAY,EAAE,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;QACpF,IAAI,KAAK,EAAE;UACT,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC;UACpF,IAAI,iBAAiB,EAAE;YACrB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,iBAAiB,CAAC;YACvD,MAAM,SAAS,CAAC,gBAAgB,CAAC,cAAc,EAAE,iBAAiB,CAAC;YACnE,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,iBAAiB,CAAC;UACxD;SACF,MAAM;UACL,MAAM,SAAS,CAAC,gBAAgB,CAAC,cAAc,EAAE,SAAS,CAAC;QAC5D;OACF,MAAM;QACL,MAAM,SAAS,CAAC,gBAAgB,CAAC,cAAc,EAAE,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAf,eAAe,CAAE,cAAc,CAAC;QACjF,IAAI,eAAe,IAAI,eAAe,CAAC,cAAc,EAAE;UACrD,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC;UAC/D,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;QACnE;MACF;IACF;IAED,eAAe,SAAS,CAAC,UAAuB,EAAE,SAAuB,EAAA;MACvE,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;MACpC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC;MAE9C,MAAM,YAAY,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE;QAC/C,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,SAAS,KAAK,SAAS,GAAG,CAAC,GAAG,SAAS;QACjD,SAAS,EAAE,SAAgB;QAC3B,UAAU,EAAE,SAAS,KAAK,SAAS;QACnC,iBAAiB,EAAE,KAAK;QACxB,gBAAgB,EAAE,SAAS,CAAC;OAC7B,CAAC;IACH;EACF;EAED,MAAM,GAAA;IACJ,MAAM;MAAE;IAAQ,CAAE,GAAG,IAAI,CAAC,KAAK;IAC/B,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAuB;IAC3E,IAAI,CAAC,eAAe,GAAG,eAAe;IAEtC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CACjD,IAAI,CAAC,EAAE,EACP,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB,MAAA;MACE,IAAI,CAAC,WAAW,EAAE;KACnB,CACF;IAED,OACE,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAQ,EAAA;MAAC,KAAK,EAAE,IAAI,CAAC;IAAiB,CAAA,EACjD,KAAK,CAAC,YAAY,CACjB,eAAsB,EACtB;MACE,GAAG,EAAG,IAAgC,IAAA;QACpC,IAAI,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE;UAChC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;QACnC;QACD,IAAI,eAAe,CAAC,KAAK,CAAC,YAAY,EAAE;UACtC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI;QAClD;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI;QAC/B,MAAM;UAAE;QAAG,CAAE,GAAG,eAAsB;QACtC,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;UAC7B,GAAG,CAAC,IAAI,CAAC;QACV;MACF;KACF,EACD,UAAU,CACX,CACqB;EAE3B;EAED,WAAW,WAAW,GAAA;IACpB,OAAO,mBAAmB;EAC3B;AACF;AAID,SAAS,UAAU,CAAC,IAAqB,EAAE,SAAoB,EAAA;EAC7D,IAAI,WAA4B;EAChC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAA0B,EAAG,KAAyB,IAAA;IAC3E,MAAM,UAAU,GAAG;MACjB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK;MACxB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI;MAC1C,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC;KACxB;IACD,MAAM,KAAK,GAAGC,WAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;IACvD,IAAI,KAAK,EAAE;MACT,WAAW,GAAG,KAAK;IACpB;GACF,CAAC;EAEF,IAAI,WAAW,EAAE;IACf,OAAO,WAAW;EACnB;;;EAGD,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAA0B,EAAG,KAAyB,IAAA;IAC3E,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;MAC3C,WAAW,GAAG,KAAK;IACpB;GACF,CAAC;EAEF,OAAO,WAAW;AACpB;AAEA,SAASD,gBAAc,CAAC,IAAwB,EAAE,QAAgB,EAAE,UAAoB,EAAA;EACtF,MAAM,UAAU,GAAG;IACjB,KAAK,EAAE,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK;IAC3C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;IACxC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;GACvB;EACD,MAAM,KAAK,GAAGC,WAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;EAE7C,OAAO,KAAK;AACd;AC1PA,MAAM,cAAe,SAAQ,KAAK,CAAC,aAA2C,CAAA;EAmB5E,WAAA,CAAY,KAAoB,EAAA;IAC9B,KAAK,CAAC,KAAK,CAAC;IAlBd,IAAA,CAAA,+BAA+B,GAAmD,EAAE;IAEpF,IAAA,CAAA,eAAe,GAAG,IAAI,eAAe,EAAE;IACvC,IAAA,CAAA,SAAS,GAAG,IAAI,oBAAoB,EAAE;IACtC,IAAA,CAAA,uBAAuB,GAA6B;MAClD,SAAS,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;MACjD,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;MACjC,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,sBAAsB;MAC7D,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB;MACvD,MAAM,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE;MACvC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc;MAC7C,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,uBAAuB;MAC/D,8BAA8B,EAAE,IAAI,CAAC,SAAS,CAAC,8BAA8B;MAC7E,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG;MAC/B,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC;KACjC;IAKC,MAAM,SAAS,GAAG;MAChB,EAAE,EAAE,UAAU,CAAC,WAAW,CAAC;MAC3B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ;MACtC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;KAC7B;IAED,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC;IACnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5D,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;IAE9D,IAAI,CAAC,KAAK,GAAG;MACX;KACD;EACF;EAED,eAAe,CAAC,GAAW,EAAE,IAAY,EAAE,YAAkB,EAAA;IAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,GAAG,CAAC;IACrE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1C,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,SAAS,CAAA,EAAA;QAAE,WAAW,EAAE,MAAM;QAAE,cAAc,EAAE;MAAM,CAAA,CAAE;MACxF,IAAI,SAAS,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACnC,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,YAAY;QACpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;OACvE,MAAM;QACL,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAG,QAAQ;QAC5C,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,MAAM,GAAG,SAAS;QACnE,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,YAAY;QACpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,GAAG,GAAG,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;MACjE;KACF,MAAM;MACL,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,CAAC;IAC5E;EACF;EAED,mBAAmB,CAAC,QAAwC,EAAE,MAAqB,EAAA;;IACjF,IAAI,mBAA8B;IAClC,IAAI,IAAI,CAAC,mBAAmB,EAAE;MAC5B,IAAI,IAAI,CAAC,mBAAmB,CAAC,WAAW,KAAK,SAAS,EAAE;QACtD,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;OACtD,MAAM;QACL,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;MACrD;KACF,MAAM;MACL,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;IACrD;IAED,MAAM,UAAU,GAAG,mBAAmB,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM;IAC5E,IAAI,UAAU,KAAK,QAAQ,CAAC,QAAQ,EAAE;MACpC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;QAC7B,IAAI,MAAM,KAAK,SAAS,EAAE;UACxB,IAAI,CAAC,mBAAmB,GAAG;YACzB,WAAW,EAAE,SAAS;YACtB,cAAc,EAAE,MAAM;YACtB,GAAG,EAAE,IAAI,CAAC;WACX;QACF;QACD,IAAI,MAAM,KAAK,KAAK,EAAE;UACpB,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;UACzC,IAAI,EAAE,IAAI,EAAE,CAAC,aAAa,EAAE;YAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC1D,IAAI,CAAC,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,QAAQ,CAAA,EAAA;cAAE,WAAW,EAAE,KAAK;cAAE,cAAc,EAAE;YAAM,CAAA,CAAE;WACvF,MAAM;YACL,MAAM,SAAS,GAAG,MAAM;YACxB,IAAI,CAAC,mBAAmB,GAAG;cACzB,WAAW,EAAE,KAAK;cAClB,cAAc,EAAE,SAAS;cACzB,GAAG,EAAE,IAAI,CAAC;aACX;UACF;QACF;QACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;UAC7B,IAAI,CAAC,mBAAmB,GAAG;YACzB,WAAW,EAAE,MAAM;YACnB,cAAc,EAAE,CAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,KAAI,SAAS;YACtD,YAAY,EAAA,CAAA,EAAA,GAAE,QAAQ,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa;YAC3C,GAAG,EAAE,IAAI,CAAC;WACX;QACF;MACF;MAED,IAAI,SAAoB;MAExB,IAAA,CAAA,EAAA,GAAI,IAAI,CAAC,mBAAmB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,EAAE,EAAE;QAChC,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACH,IAAI,CAAC,mBAAiC,CAAA,EAAA;UAC1C,YAAY,EAAE,mBAAmB,CAAC;QAAQ,CAAA,CAC3C;QACD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC;OACpC,MAAM;QACL,MAAM,QAAQ,GACZ,IAAI,CAAC,mBAAmB,CAAC,WAAW,KAAK,MAAM,IAC/C,IAAI,CAAC,mBAAmB,CAAC,cAAc,KAAK,SAAS;QACvD,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;UACP,EAAE,EAAE,UAAU,CAAC,WAAW;QAAC,CAAA,EACxB,IAAI,CAAC,mBAAmB,CAAA,EAAA;UAC3B,YAAY,EAAE,mBAAmB,CAAC,QAAQ;UAC1C,QAAQ,EAAE,QAAQ,CAAC,QAAQ;UAC3B,MAAM,EAAE,QAAQ,CAAC,MAAM;UACvB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM;UAC/B,qBAAqB,EAAE,mBAAmB,CAAC;QAAY,CAAA,CACxD;QACD,IAAI,QAAQ,EAAE;UACZ,SAAS,CAAC,GAAG,GAAG,mBAAmB,CAAC,GAAG;UACvC,SAAS,CAAC,aAAa,GAAG,mBAAmB,CAAC,QAAQ;SACvD,MAAM,IAAI,SAAS,CAAC,WAAW,KAAK,KAAK,EAAE;UAC1C,MAAM,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC;UAC1D,SAAS,CAAC,aAAa,GAAG,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,aAAa;SAC3C,MAAM,IAAI,SAAS,CAAC,WAAW,KAAK,MAAM,IAAI,SAAS,CAAC,GAAG,KAAK,mBAAmB,CAAC,GAAG,EAAE;;UAExF,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,SAAS,CAAC,GAAG,CAAC;UAC/E,SAAS,CAAC,aAAa,GAAG,SAAS,KAAA,IAAA,IAAT,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,SAAS,CAAE,aAAa;SACnD,MAAM,IAAI,SAAS,CAAC,WAAW,KAAK,SAAS,EAAE;;UAE9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;UACvD,SAAS,CAAC,YAAY,GAAG,CAAA,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,QAAQ,KAAI,SAAS,CAAC,YAAY;UAC7E,SAAS,CAAC,qBAAqB,GAAG,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,YAAY;UAChE,SAAS,CAAC,aAAa,GAAG,CAAA,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,aAAa,KAAI,SAAS,CAAC,aAAa;UACpF,SAAS,CAAC,cAAc,GAAG,CAAA,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,cAAc,KAAI,SAAS,CAAC,cAAc;UACvF,SAAS,CAAC,cAAc,GAAG,CAAA,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,cAAc,KAAI,SAAS,CAAC,cAAc;QACxF;QAED,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC;MACpC;MAED,IAAI,CAAC,QAAQ,CAAC;QACZ;OACD,CAAC;IACH;IAED,IAAI,CAAC,mBAAmB,GAAG,SAAS;EACrC;EAED,gBAAgB,GAAA;IACd,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;EAC5B;EAED,cAAc,CACZ,IAAY,EACZ,WAAwB,EACxB,cAAgC,EAChC,cAAiC,EACjC,YAAkB,EAClB,GAAY,EAAA;IAEZ,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAA,CAAE,EAAE;MACvE,WAAW;MACX,cAAc;MACd,YAAY;MACZ,cAAc;MACd;KACD,CAAC;IAEF,IAAI,WAAW,KAAK,MAAM,EAAE;MAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;KAC9B,MAAM;MACL,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IACjC;EACF;EAED,kBAAkB,GAAyE;IAAA,IAAxE,WAAA,uEAAkC,GAAG;IAAA,IAAE,cAAiC;IACzF,MAAM,MAAM,GAAG,SAAS,EAAE;IAC1B,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,uBAA8B,CAAC;IAC9F,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;IAChD,IAAI,SAAS,IAAI,SAAS,CAAC,aAAa,EAAE;MACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC;MACjE,IAAI,QAAQ,EAAE;QACZ,IAAI,CAAC,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACnB,QAAQ,CAAA,EAAA;UACX,WAAW,EAAE,KAAK;UAClB,cAAc,EAAE,MAAM;UACtB,cAAc,EAAE,cAAc,IAAI,SAAS,CAAC;QAAc,CAAA,CAC3D;QACD,IAAI,SAAS,CAAC,YAAY,KAAK,SAAS,CAAC,aAAa,EAAE;UACtD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;SAC5B,MAAM;UACL,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;QAChF;OACF,MAAM;QACL,IAAI,CAAC,cAAc,CAAC,WAAqB,EAAE,KAAK,EAAE,MAAM,CAAC;MAC1D;KACF,MAAM;MACL,IAAI,CAAC,cAAc,CAAC,WAAqB,EAAE,KAAK,EAAE,MAAM,CAAC;IAC1D;EACF;EAED,cAAc,CAAC,GAAW,EAAE,YAAoB,EAAE,oBAAyB,EAAA;IACzE,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,GAAG,CAAC;IACnE,IAAI,SAAS,EAAE;MACb,MAAM,YAAY,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,SAAS,CAAE;MACrC,YAAY,CAAC,QAAQ,GAAG,YAAY;MACpC,YAAY,CAAC,YAAY,GAAG,oBAAoB;MAChD,IAAI,CAAC,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,YAAY,CAAA,EAAA;QAAE,WAAW,EAAE,KAAK;QAAE,cAAc,EAAE;MAAM,CAAA,CAAE;MAC1F,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;IAC7E;EACF;EAED,mBAAmB,CAAC,GAAW,EAAA;IAC7B,IAAI,CAAC,UAAU,GAAG,GAAG;IACrB,MAAM,EAAE,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAE;IAChD,IAAI,EAAE,CAAC,GAAG,KAAK,GAAG,EAAE;MAClB,EAAE,CAAC,GAAG,GAAG,GAAG;MACZ,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;IAChC;EACF;EAED,MAAM,GAAA;IACJ,OACE,KAAA,CAAA,aAAA,CAAC,mBAAmB,CAAC,QAAQ,EAAA;MAAC,KAAK,EAAE,IAAI,CAAC;IAAuB,CAAA,EAC/D,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;MACT,QAAQ,EAAE,aAAa;MACvB,WAAW,EAAE,CAAA,CAAE;MACf,YAAY,EAAE,YAAY;MAC1B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAU;MAChC,YAAY,EAAE,IAAI,CAAC,gBAAgB;MACnC,cAAc,EAAE,IAAI,CAAC,kBAAkB;MACvC,UAAU,EAAE,IAAI,CAAC,cAAc;MAC/B,eAAe,EAAE,IAAI,CAAC,mBAAmB;MACzC,WAAW,EAAE,IAAI,CAAC,eAAe;MACjC,UAAU,EAAE,IAAI,CAAC,cAAc;MAC/B,eAAe,EAAE,IAAI,CAAC;IAAe,CAAA,EAEpC,IAAI,CAAC,KAAK,CAAC,QAAQ,CACT,CACgB;EAElC;AACF;AAEM,MAAM,SAAS,GAAG,UAAU,CAAC,cAAc,CAAC;AACnD,SAAS,CAAC,WAAW,GAAG,WAAW;MCrRtB,cAAe,SAAQ,KAAK,CAAC,SAA8B,CAAA;EAItE,WAAA,CAAY,KAA0B,EAAA;IACpC,KAAK,CAAC,KAAK,CAAC;IACZ,MAAM;QAAE;MAAO,CAAA,GAAc,KAAK;MAAd,IAAI,GAAA,MAAA,CAAK,KAAK,EAA5B,CAAA,SAAA,CAAoB,CAAQ;IAClC,IAAI,CAAC,OAAO,GAAG,OAAO,IAAIC,oBAAa,CAAC,IAAI,CAAC;IAC7C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;EACvE;EAED,mBAAmB,CAAC,QAAyB,EAAE,MAAqB,EAAA;IAClE,IAAI,IAAI,CAAC,oBAAoB,EAAE;MAC7B,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC5C;EACF;EAED,uBAAuB,CAAC,EAA8D,EAAA;IACpF,IAAI,CAAC,oBAAoB,GAAG,EAAE;EAC/B;EAED,MAAM,GAAA;IACJ,MAAM,EAAA,GAAyB,IAAI,CAAC,KAAK;MAAnC;QAAE;MAAQ,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAApB,CAAA,UAAA,CAAsB,CAAa;IACzC,OACE,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA;MAAC,OAAO,EAAE,IAAI,CAAC;IAAO,CAAA,EAAM,KAAK,CAAA,EACtC,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;MAAC,uBAAuB,EAAE,IAAI,CAAC;IAAuB,CAAA,EAAG,QAAQ,CAAa,CACjF;EAEZ;;MClCU,oBAAqB,SAAQ,KAAK,CAAC,SAAoC,CAAA;EAIlF,WAAA,CAAY,KAAgC,EAAA;IAC1C,KAAK,CAAC,KAAK,CAAC;IACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO;IAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;EACvE;EAED,mBAAmB,CAAC,QAAyB,EAAE,MAAqB,EAAA;IAClE,IAAI,IAAI,CAAC,oBAAoB,EAAE;MAC7B,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC5C;EACF;EAED,uBAAuB,CAAC,EAA8D,EAAA;IACpF,IAAI,CAAC,oBAAoB,GAAG,EAAE;EAC/B;EAED,MAAM,GAAA;IACJ,MAAM,EAAA,GAAyB,IAAI,CAAC,KAAK;MAAnC;QAAE;MAAQ,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAApB,CAAA,UAAA,CAAsB,CAAa;IACzC,OACE,KAAA,CAAA,aAAA,CAACC,QAAM,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA,EACf,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;MAAC,uBAAuB,EAAE,IAAI,CAAC;IAAuB,CAAA,EAAG,QAAQ,CAAa,CACjF;EAEZ;;MCvBU,kBAAmB,SAAQ,KAAK,CAAC,SAAkC,CAAA;EAI9E,WAAA,CAAY,KAA8B,EAAA;IACxC,KAAK,CAAC,KAAK,CAAC;IACZ,MAAM;QAAE;MAAO,CAAA,GAAc,KAAK;MAAd,IAAI,GAAA,MAAA,CAAK,KAAK,EAA5B,CAAA,SAAA,CAAoB,CAAQ;IAClC,IAAI,CAAC,OAAO,GAAG,OAAO,IAAID,iBAAa,CAAC,IAAI,CAAC;IAC7C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;EACvE;EAED,mBAAmB,CAAC,QAAyB,EAAE,MAAqB,EAAA;IAClE,IAAI,IAAI,CAAC,oBAAoB,EAAE;MAC7B,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC5C;EACF;EAED,uBAAuB,CAAC,EAA8D,EAAA;IACpF,IAAI,CAAC,oBAAoB,GAAG,EAAE;EAC/B;EAED,MAAM,GAAA;IACJ,MAAM,EAAA,GAAyB,IAAI,CAAC,KAAK;MAAnC;QAAE;MAAQ,CAAA,GAAA,EAAyB;MAApB,KAAK,GAAA,MAAA,CAAA,EAAA,EAApB,CAAA,UAAA,CAAsB,CAAa;IACzC,OACE,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA;MAAC,OAAO,EAAE,IAAI,CAAC;IAAO,CAAA,EAAM,KAAK,CAAA,EACtC,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;MAAC,uBAAuB,EAAE,IAAI,CAAC;IAAuB,CAAA,EAAG,QAAQ,CAAa,CACjF;EAEZ","sourcesContent":["import { IonRouteProps } from '@ionic/react';\nimport React from 'react';\nimport { Route } from 'react-router';\n\nexport class IonRouteInner extends React.PureComponent<IonRouteProps> {\n  render() {\n    return (\n      <Route\n        path={this.props.path}\n        exact={this.props.exact}\n        render={this.props.render}\n        computedMatch={(this.props as any).computedMatch}\n      />\n    );\n  }\n}\n","import {\n  IonRoute,\n  RouteInfo,\n  ViewItem,\n  ViewLifeCycleManager,\n  ViewStacks,\n  generateId,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router';\n\nexport class ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(\n    outletId: string,\n    reactElement: React.ReactElement,\n    routeInfo: RouteInfo,\n    page?: HTMLElement\n  ) {\n    const viewItem: ViewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false,\n    };\n\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component,\n    };\n\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props,\n    };\n\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId: string, ionRouterOutlet: React.ReactElement, routeInfo: RouteInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const viewItem = viewItems.find((v) => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n\n    const children = viewItems.map((viewItem) => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string) {\n    const { viewItem, match } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    if (viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, mustBeIonRoute = true) {\n    const { viewItem } = this.findViewItemByPath(\n      routeInfo.lastPathname!,\n      outletId,\n      false,\n      mustBeIonRoute\n    );\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname: string, outletId?: string) {\n    const { viewItem } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  private findViewItemByPath(\n    pathname: string,\n    outletId?: string,\n    forceExact?: boolean,\n    mustBeIonRoute?: boolean\n  ) {\n    let viewItem: ViewItem | undefined;\n    let match: ReturnType<typeof matchPath> | undefined;\n    let viewStack: ViewItem[];\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return { viewItem, match };\n\n    function matchView(v: ViewItem) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component,\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n    function matchDefaultRoute(v: ViewItem) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {},\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","export function clonePageElement(leavingViewHtml: string | HTMLElement) {\n  let html: string;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild as HTMLElement;\n  }\n  return undefined;\n}\n","import {\n  RouteInfo,\n  RouteManagerContext,\n  StackContext,\n  StackContextState,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router-dom';\n\nimport { clonePageElement } from './clonePageElement';\n\ninterface StackManagerProps {\n  routeInfo: RouteInfo;\n}\n\ninterface StackManagerState {}\n\nexport class StackManager extends React.PureComponent<StackManagerProps, StackManagerState> {\n  id: string;\n  context!: React.ContextType<typeof RouteManagerContext>;\n  ionRouterOutlet?: React.ReactElement;\n  routerOutletElement: HTMLIonRouterOutletElement | undefined;\n\n  stackContextValue: StackContextState = {\n    registerIonPage: this.registerIonPage.bind(this),\n    isInOutlet: () => true,\n  };\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n  }\n\n  componentDidMount() {\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      // console.log(`SM Mount - ${this.routerOutletElement.id} (${this.id})`);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps: StackManagerProps) {\n    if (this.props.routeInfo.pathname !== prevProps.routeInfo.pathname) {\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentWillUnmount() {\n    // console.log(`SM UNMount - ${(this.routerOutletElement?.id as any).id} (${this.id})`);\n    this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo: RouteInfo) {\n    // If routerOutlet isn't quite ready, give it another try in a moment\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      setTimeout(() => this.handlePageTransition(routeInfo), 10);\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(\n          routeInfo.prevRouteLastPathname,\n          this.id\n        );\n      }\n\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if (routeInfo.routeOptions?.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute(\n        this.ionRouterOutlet?.props.children,\n        routeInfo\n      ) as React.ReactElement;\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      }\n      if (!enteringViewItem) {\n        if (enteringRoute) {\n          enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n          this.context.addViewItem(enteringViewItem);\n        }\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page: HTMLElement, routeInfo: RouteInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n    }\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        return this.context.canGoBack();\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.context.goBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: (_shouldContinue) => true,\n    };\n  }\n\n  async transitionPage(\n    routeInfo: RouteInfo,\n    enteringViewItem: ViewItem,\n    leavingViewItem?: ViewItem\n  ) {\n    const routerOutlet = this.routerOutletElement!;\n\n    const direction =\n      routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root'\n        ? undefined\n        : routeInfo.routeDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (\n        leavingViewItem &&\n        leavingViewItem.ionPageElement &&\n        enteringViewItem === leavingViewItem\n      ) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem?.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n    async function runCommit(enteringEl: HTMLElement, leavingEl?: HTMLElement) {\n      enteringEl.classList.add('ion-page');\n      enteringEl.classList.add('ion-page-invisible');\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: direction === undefined ? 0 : undefined,\n        direction: direction as any,\n        showGoBack: direction === 'forward',\n        progressAnimation: false,\n        animationBuilder: routeInfo.routeAnimation,\n      });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    this.ionRouterOutlet = ionRouterOutlet;\n\n    const components = this.context.getChildrenToRender(\n      this.id,\n      this.ionRouterOutlet,\n      this.props.routeInfo,\n      () => {\n        this.forceUpdate();\n      }\n    );\n\n    return (\n      <StackContext.Provider value={this.stackContextValue}>\n        {React.cloneElement(\n          ionRouterOutlet as any,\n          {\n            ref: (node: HTMLIonRouterOutletElement) => {\n              if (ionRouterOutlet.props.setRef) {\n                ionRouterOutlet.props.setRef(node);\n              }\n              if (ionRouterOutlet.props.forwardedRef) {\n                ionRouterOutlet.props.forwardedRef.current = node;\n              }\n              this.routerOutletElement = node;\n              const { ref } = ionRouterOutlet as any;\n              if (typeof ref === 'function') {\n                ref(node);\n              }\n            },\n          },\n          components\n        )}\n      </StackContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n\nexport default StackManager;\n\nfunction matchRoute(node: React.ReactNode, routeInfo: RouteInfo) {\n  let matchedNode: React.ReactNode;\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component,\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n\n  return matchedNode;\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","import { AnimationBuilder } from '@ionic/core';\nimport {\n  LocationHistory,\n  NavManager,\n  RouteAction,\n  RouteInfo,\n  RouteManagerContext,\n  RouteManagerContextState,\n  RouterDirection,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { IonRouteInner } from './IonRouteInner';\nimport { ReactRouterViewStack } from './ReactRouterViewStack';\nimport StackManager from './StackManager';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  routerOptions?: { as?: string; unmount?: boolean };\n}\n\ninterface IonRouteProps extends RouteComponentProps<{}, {}, LocationState> {\n  registerHistoryListener: (\n    cb: (location: HistoryLocation<any>, action: HistoryAction) => void\n  ) => void;\n}\n\ninterface IonRouteState {\n  routeInfo: RouteInfo;\n}\n\nclass IonRouterInner extends React.PureComponent<IonRouteProps, IonRouteState> {\n  currentTab?: string;\n  exitViewFromOtherOutletHandlers: ((pathname: string) => ViewItem | undefined)[] = [];\n  incomingRouteParams?: Partial<RouteInfo>;\n  locationHistory = new LocationHistory();\n  viewStack = new ReactRouterViewStack();\n  routeMangerContextState: RouteManagerContextState = {\n    canGoBack: () => this.locationHistory.canGoBack(),\n    clearOutlet: this.viewStack.clear,\n    findViewItemByPathname: this.viewStack.findViewItemByPathname,\n    getChildrenToRender: this.viewStack.getChildrenToRender,\n    goBack: () => this.handleNavigateBack(),\n    createViewItem: this.viewStack.createViewItem,\n    findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n    findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n    addViewItem: this.viewStack.add,\n    unMountViewItem: this.viewStack.remove,\n  };\n\n  constructor(props: IonRouteProps) {\n    super(props);\n\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search,\n    };\n\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n\n    this.state = {\n      routeInfo,\n    };\n  }\n\n  handleChangeTab(tab: string, path: string, routeOptions?: any) {\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = { ...routeInfo, routeAction: 'push', routeDirection: 'none' };\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    let leavingLocationInfo: RouteInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab, // TODO this isn't legit if replacing to a page that is not in the tabs\n          };\n        }\n        if (action === 'POP') {\n          const ri = this.locationHistory.current();\n          if (ri && ri.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(ri);\n            this.incomingRouteParams = { ...prevInfo, routeAction: 'pop', routeDirection: 'back' };\n          } else {\n            const direction = 'none';\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: direction,\n              tab: this.currentTab,\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: location.state?.direction || 'forward',\n            routeOptions: location.state?.routerOptions,\n            tab: this.currentTab,\n          };\n        }\n      }\n\n      let routeInfo: RouteInfo;\n\n      if (this.incomingRouteParams?.id) {\n        routeInfo = {\n          ...(this.incomingRouteParams as RouteInfo),\n          lastPathname: leavingLocationInfo.pathname,\n        };\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed =\n          this.incomingRouteParams.routeAction === 'push' &&\n          this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = {\n          id: generateId('routeInfo'),\n          ...this.incomingRouteParams,\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname,\n        };\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          routeInfo.lastPathname = currentRouteInfo?.pathname || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo?.lastPathname;\n          routeInfo.pushedByRoute = currentRouteInfo?.pushedByRoute || routeInfo.pushedByRoute;\n          routeInfo.routeDirection = currentRouteInfo?.routeDirection || routeInfo.routeDirection;\n          routeInfo.routeAnimation = currentRouteInfo?.routeAnimation || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo,\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n\n  handleNativeBack() {\n    this.props.history.goBack();\n  }\n\n  handleNavigate(\n    path: string,\n    routeAction: RouteAction,\n    routeDirection?: RouterDirection,\n    routeAnimation?: AnimationBuilder,\n    routeOptions?: any,\n    tab?: string\n  ) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab,\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack(defaultHref: string | RouteInfo = '/', routeAnimation?: AnimationBuilder) {\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref' as any);\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = {\n          ...prevInfo,\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation,\n        };\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute) {\n          this.props.history.goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref as string, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref as string, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab: string, originalHref: string, originalRouteOptions: any) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = { ...routeInfo };\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = { ...newRouteInfo, routeAction: 'pop', routeDirection: 'back' };\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab: string) {\n    this.currentTab = tab;\n    const ri = { ...this.locationHistory.current() };\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.routeMangerContextState}>\n        <NavManager\n          ionRoute={IonRouteInner}\n          ionRedirect={{}}\n          stackManager={StackManager}\n          routeInfo={this.state.routeInfo!}\n          onNativeBack={this.handleNativeBack}\n          onNavigateBack={this.handleNavigateBack}\n          onNavigate={this.handleNavigate}\n          onSetCurrentTab={this.handleSetCurrentTab}\n          onChangeTab={this.handleChangeTab}\n          onResetTab={this.handleResetTab}\n          locationHistory={this.locationHistory}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nexport const IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createBrowserHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactRouter extends React.Component<IonReactRouterProps> {\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n  history: History;\n\n  constructor(props: IonReactRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import { Action as HistoryAction, Location as HistoryLocation, MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouterProps, Router } from 'react-router';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  history: MemoryHistory;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactMemoryRouterProps) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createHashHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactHashRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactHashRouter extends React.Component<IonReactHashRouterProps> {\n  history: History;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactHashRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    if (this.historyListenHandler) {\n      this.historyListenHandler(location, action);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}