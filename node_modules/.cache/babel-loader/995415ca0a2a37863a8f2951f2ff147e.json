{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nithin.DESKTOP-4GS3RPD\\\\Music\\\\synkd-kasturi\\\\synkd-kasturi\\\\src\\\\pages\\\\BuilderChip\\\\BuilderChipSetupStart.jsx\";\nimport React from \"react\";\nimport { IonItem, IonGrid, IonRow, IonCol, IonHeader, IonLoading, IonTitle, IonButton, IonIcon, IonToast, IonContent, IonToolbar } from \"@ionic/react\";\nimport { closeOutline, hardwareChip } from \"ionicons/icons\";\nimport \"./BuilderChipSetupStart.css\";\nimport { getChipInfo, getChipMACSetup } from \"../ServerRequests/localApi\";\nvar toastMsg = \"\";\nvar auth_token = \"\";\nclass BuilderChipSetupStart extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      showToast: false,\n      loading: false,\n      roomid: this.props.roomid\n    };\n  }\n  async verifyConnectionWithChip() {\n    this.setState({\n      loading: true\n    });\n    const response = await getChipMACSetup(this.state.ssid);\n    if (response !== undefined) {\n      console.log(response[0].data.mac);\n      switch (response[0].status) {\n        case 200:\n          const response_b = await getChipInfo();\n          if (response_b !== undefined) {\n            switch (response_b[0].status) {\n              case 200:\n                this.props.component({\n                  ComponentType: 2,\n                  mac: response[0].data.mac,\n                  roomid: this.state.roomid,\n                  slotCount: response_b[0].data.slotCount\n                });\n                this.setState({\n                  loading: false\n                });\n                break;\n              default:\n                break;\n            }\n          }\n          break;\n        default:\n          toastMsg = \"Could not verify chip. Are you sure you're connected to the chip?\";\n          this.setState({\n            showToast: true\n          });\n          this.setState({\n            loading: false\n          });\n          break;\n      }\n    } else {\n      toastMsg = \"Could not verify chip. Are you sure you're connected to the chip?\";\n      this.setState({\n        showToast: true\n      });\n      this.setState({\n        loading: false\n      });\n    }\n    this.setState({\n      loading: false\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(IonContent, null, /*#__PURE__*/React.createElement(IonHeader, {\n      className: \"ion-no-border\"\n    }, /*#__PURE__*/React.createElement(IonToolbar, {\n      mode: \"ios\"\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      slot: \"secondary\"\n    }, \"BUILDER CHIP SET-UP\"), /*#__PURE__*/React.createElement(IonButton, {\n      slot: \"end\",\n      size: \"large\",\n      fill: \"clear\",\n      onClick: () => this.props.onDidDismiss(true)\n    }, /*#__PURE__*/React.createElement(IonIcon, {\n      icon: closeOutline,\n      color: \"dark\"\n    })))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc\"\n    }, \"If the light on the chip is not blinking, press and hold the 'mem_rst' button for 3 seconds and release. Next, look for the chip on the 'WiFi Networks' list on your device and connect to it. Once connected, press the Start button.\"), /*#__PURE__*/React.createElement(IonButton, {\n      className: \"button_icon\",\n      color: \"light\",\n      fill: \"clear\"\n    }, /*#__PURE__*/React.createElement(IonIcon, {\n      className: \"icon\",\n      icon: hardwareChip\n    })), /*#__PURE__*/React.createElement(IonButton, {\n      className: \"button_start\",\n      buttonType: \"button\",\n      shape: \"round\",\n      size: \"default\",\n      onClick: () => this.verifyConnectionWithChip()\n    }, \"Start\")), /*#__PURE__*/React.createElement(IonLoading, {\n      isOpen: this.state.loading,\n      onDidDismiss: () => this.setState({\n        laoding: false\n      }),\n      message: 'Attempting to communicate with chip...Please wait.'\n    }), /*#__PURE__*/React.createElement(IonToast, {\n      isOpen: this.state.showToast,\n      onDidDismiss: () => this.setState({\n        showToast: false\n      }),\n      message: toastMsg,\n      duration: 3000\n    }));\n  }\n}\nexport default BuilderChipSetupStart;","map":{"version":3,"names":["React","IonItem","IonGrid","IonRow","IonCol","IonHeader","IonLoading","IonTitle","IonButton","IonIcon","IonToast","IonContent","IonToolbar","closeOutline","hardwareChip","getChipInfo","getChipMACSetup","toastMsg","auth_token","BuilderChipSetupStart","Component","constructor","props","console","log","state","showToast","loading","roomid","verifyConnectionWithChip","setState","response","ssid","undefined","data","mac","status","response_b","component","ComponentType","slotCount","render","onDidDismiss","laoding"],"sources":["C:/Users/Nithin.DESKTOP-4GS3RPD/Music/synkd-kasturi/synkd-kasturi/src/pages/BuilderChip/BuilderChipSetupStart.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  IonItem,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonHeader,\n  IonLoading,\n  IonTitle,\n  IonButton,\n  IonIcon,\n  IonToast,\n  IonContent,\n  IonToolbar\n} from \"@ionic/react\";\nimport { closeOutline, hardwareChip } from \"ionicons/icons\";\nimport \"./BuilderChipSetupStart.css\";\n\nimport { getChipInfo, getChipMACSetup } from \"../ServerRequests/localApi\";\n\nvar toastMsg = \"\";\nvar auth_token = \"\";\n\n\nclass BuilderChipSetupStart extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n\n      this.state={\n        showToast: false,\n        loading: false,\n        roomid: this.props.roomid\n        \n      }\n  }\n\n\n\n\nasync verifyConnectionWithChip() {\n  \n        this.setState({loading: true});\n        const response = await getChipMACSetup(this.state.ssid);\n\n        if(response !== undefined){\n          console.log(response[0].data.mac);\n          switch(response[0].status){\n            \n            case 200: \n\n                const response_b = await getChipInfo();\n                if(response_b !== undefined){\n\n                  switch(response_b[0].status){\n\n                    case 200:\n                      this.props.component({ ComponentType: 2 , mac: response[0].data.mac, \n                                            roomid: this.state.roomid, slotCount: response_b[0].data.slotCount});\n                      this.setState({loading: false});\n                      break;\n\n                    default:\n                      break;\n\n                  }\n\n                }\n                \n                break;\n\n                default:\n                  toastMsg = \"Could not verify chip. Are you sure you're connected to the chip?\"\n                  this.setState({showToast: true});\n                  this.setState({loading: false});\n                  break;\n          \n          }\n\n        }else{\n              toastMsg = \"Could not verify chip. Are you sure you're connected to the chip?\"\n              this.setState({showToast: true});\n              this.setState({loading: false});\n        }\n\n        this.setState({loading: false});\n      \n\n  }\n\n  render() {\n    return (\n      <IonContent>\n       <IonHeader className=\"ion-no-border\">\n\n            \n            <IonToolbar mode=\"ios\">\n            <IonTitle  slot=\"secondary\" >BUILDER CHIP SET-UP</IonTitle>\n            <IonButton slot=\"end\" size=\"large\"  fill=\"clear\"\n            onClick={() => this.props.onDidDismiss(true)}> \n            <IonIcon icon={closeOutline} color=\"dark\"></IonIcon>\n            </IonButton>\n            </IonToolbar>\n           \n            \n           \n          \n       \n          </IonHeader>\n          \n        \n      <div>\n      <p className=\"desc\">\n            If the light on the chip is not blinking, press and hold the 'mem_rst'\n            button for 3 seconds and release. Next, look for the chip on the 'WiFi Networks' list \n            on your device and connect to it. Once connected, press the Start button.\n          </p>\n          <IonButton\n                className=\"button_icon\"\n                color=\"light\"\n                fill=\"clear\"\n              >\n                <IonIcon className=\"icon\"  icon={hardwareChip}></IonIcon>\n              </IonButton>\n\n              <IonButton\n                className=\"button_start\"\n                buttonType=\"button\"\n                shape=\"round\"\n                size=\"default\"\n                \n                onClick={() => this.verifyConnectionWithChip()}\n              >\n                Start\n              </IonButton>\n              </div>\n\n        <IonLoading\n            isOpen={this.state.loading}\n            onDidDismiss={() => this.setState({laoding: false})}\n            message={'Attempting to communicate with chip...Please wait.'}\n          />\n\n        <IonToast\n          isOpen={this.state.showToast}\n          onDidDismiss={() => this.setState({showToast: false})}\n          message={toastMsg}\n          duration={3000}\n        />\n      </IonContent>\n    );\n  }\n}\n\nexport default BuilderChipSetupStart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}